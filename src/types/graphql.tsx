import { gql } from '@apollo/client';
import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  Upload: any;
};

export type ActiveRecordInterface = {
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  updatedAt: Scalars['ISO8601DateTime'];
};


export type Listing = ActiveRecordInterface & {
  __typename?: 'Listing';
  createdAt: Scalars['ISO8601DateTime'];
  description: Scalars['String'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  title: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type ListingInput = {
  id?: Maybe<Scalars['Int']>;
  title: Scalars['String'];
  description: Scalars['String'];
  images: Array<Scalars['Upload']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  saveListing: Maybe<SaveListingPayload>;
};


export type MutationSaveListingArgs = {
  listing: ListingInput;
  player: PlayerInput;
};

export type Player = ActiveRecordInterface & {
  __typename?: 'Player';
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  name: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};

export type PlayerInput = {
  name: Scalars['String'];
};

export type Product = {
  __typename?: 'Product';
  price: Scalars['Int'];
  term: Scalars['String'];
  token: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  auth: Scalars['Boolean'];
  listing: Listing;
  stripeCheckoutSessionId: Scalars['String'];
  viewer: User;
};


export type QueryListingArgs = {
  id: Scalars['Int'];
};


export type QueryStripeCheckoutSessionIdArgs = {
  price?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of SaveListing */
export type SaveListingPayload = {
  __typename?: 'SaveListingPayload';
  message: Scalars['String'];
  viewer: User;
};

export type StripeAccount = ActiveRecordInterface & {
  __typename?: 'StripeAccount';
  chargesEnabled: Scalars['Boolean'];
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  id: Scalars['Int'];
  onboardingLink: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
};


export type User = ActiveRecordInterface & {
  __typename?: 'User';
  availableProducts: Array<Product>;
  createdAt: Scalars['ISO8601DateTime'];
  errors: Array<Scalars['String']>;
  hasActiveSubscription: Scalars['Boolean'];
  id: Scalars['Int'];
  listings: Array<Listing>;
  paymentIntent: Scalars['String'];
  players: Array<Player>;
  stripeAccount: StripeAccount;
  updatedAt: Scalars['ISO8601DateTime'];
};


export type UserPlayersArgs = {
  name?: Maybe<Scalars['String']>;
};


export type UserStripeAccountArgs = {
  refresh?: Maybe<Scalars['Boolean']>;
};

export type PlayerFragment = (
  { __typename?: 'Player' }
  & Pick<Player, 'id' | 'name'>
);

export type SaveListingMutationVariables = Exact<{
  listing: ListingInput;
  player: PlayerInput;
}>;


export type SaveListingMutation = (
  { __typename?: 'Mutation' }
  & { saveListing: Maybe<(
    { __typename?: 'SaveListingPayload' }
    & Pick<SaveListingPayload, 'message'>
    & { viewer: (
      { __typename?: 'User' }
      & Pick<User, 'id'>
    ) }
  )> }
);

export type AccountQueryVariables = Exact<{ [key: string]: never; }>;


export type AccountQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id' | 'hasActiveSubscription'>
    & { stripeAccount: (
      { __typename?: 'StripeAccount' }
      & Pick<StripeAccount, 'id' | 'chargesEnabled' | 'onboardingLink'>
    ) }
  ) }
);

export type StripeAccountQueryVariables = Exact<{
  refresh?: Maybe<Scalars['Boolean']>;
}>;


export type StripeAccountQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { stripeAccount: (
      { __typename?: 'StripeAccount' }
      & Pick<StripeAccount, 'id' | 'chargesEnabled' | 'onboardingLink'>
    ) }
  ) }
);

export type AddPaymentQueryVariables = Exact<{
  price?: Maybe<Scalars['String']>;
}>;


export type AddPaymentQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'stripeCheckoutSessionId'>
);

export type AuthQueryVariables = Exact<{ [key: string]: never; }>;


export type AuthQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'auth'>
);

export type FakeChargeQueryVariables = Exact<{ [key: string]: never; }>;


export type FakeChargeQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id' | 'paymentIntent'>
  ) }
);

export type PlayersQueryVariables = Exact<{
  name?: Maybe<Scalars['String']>;
}>;


export type PlayersQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { players: Array<(
      { __typename?: 'Player' }
      & PlayerFragment
    )> }
  ) }
);

export type ProductsQueryVariables = Exact<{ [key: string]: never; }>;


export type ProductsQuery = (
  { __typename?: 'Query' }
  & { viewer: (
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { availableProducts: Array<(
      { __typename?: 'Product' }
      & Pick<Product, 'token' | 'price' | 'term'>
    )> }
  ) }
);

export const PlayerFragmentDoc = gql`
    fragment player on Player {
  id
  name
}
    `;
export const SaveListingDocument = gql`
    mutation saveListing($listing: ListingInput!, $player: PlayerInput!) {
  saveListing(listing: $listing, player: $player) {
    viewer {
      id
    }
    message
  }
}
    `;
export type SaveListingMutationFn = ApolloReactCommon.MutationFunction<SaveListingMutation, SaveListingMutationVariables>;

/**
 * __useSaveListingMutation__
 *
 * To run a mutation, you first call `useSaveListingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSaveListingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [saveListingMutation, { data, loading, error }] = useSaveListingMutation({
 *   variables: {
 *      listing: // value for 'listing'
 *      player: // value for 'player'
 *   },
 * });
 */
export function useSaveListingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SaveListingMutation, SaveListingMutationVariables>) {
        return ApolloReactHooks.useMutation<SaveListingMutation, SaveListingMutationVariables>(SaveListingDocument, baseOptions);
      }
export type SaveListingMutationHookResult = ReturnType<typeof useSaveListingMutation>;
export type SaveListingMutationResult = ApolloReactCommon.MutationResult<SaveListingMutation>;
export type SaveListingMutationOptions = ApolloReactCommon.BaseMutationOptions<SaveListingMutation, SaveListingMutationVariables>;
export const AccountDocument = gql`
    query account {
  viewer {
    id
    hasActiveSubscription
    stripeAccount {
      id
      chargesEnabled
      onboardingLink
    }
  }
}
    `;

/**
 * __useAccountQuery__
 *
 * To run a query within a React component, call `useAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAccountQuery({
 *   variables: {
 *   },
 * });
 */
export function useAccountQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AccountQuery, AccountQueryVariables>) {
        return ApolloReactHooks.useQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);
      }
export function useAccountLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AccountQuery, AccountQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AccountQuery, AccountQueryVariables>(AccountDocument, baseOptions);
        }
export type AccountQueryHookResult = ReturnType<typeof useAccountQuery>;
export type AccountLazyQueryHookResult = ReturnType<typeof useAccountLazyQuery>;
export type AccountQueryResult = ApolloReactCommon.QueryResult<AccountQuery, AccountQueryVariables>;
export const StripeAccountDocument = gql`
    query stripeAccount($refresh: Boolean) {
  viewer {
    id
    stripeAccount(refresh: $refresh) {
      id
      chargesEnabled
      onboardingLink
    }
  }
}
    `;

/**
 * __useStripeAccountQuery__
 *
 * To run a query within a React component, call `useStripeAccountQuery` and pass it any options that fit your needs.
 * When your component renders, `useStripeAccountQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useStripeAccountQuery({
 *   variables: {
 *      refresh: // value for 'refresh'
 *   },
 * });
 */
export function useStripeAccountQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<StripeAccountQuery, StripeAccountQueryVariables>) {
        return ApolloReactHooks.useQuery<StripeAccountQuery, StripeAccountQueryVariables>(StripeAccountDocument, baseOptions);
      }
export function useStripeAccountLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<StripeAccountQuery, StripeAccountQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<StripeAccountQuery, StripeAccountQueryVariables>(StripeAccountDocument, baseOptions);
        }
export type StripeAccountQueryHookResult = ReturnType<typeof useStripeAccountQuery>;
export type StripeAccountLazyQueryHookResult = ReturnType<typeof useStripeAccountLazyQuery>;
export type StripeAccountQueryResult = ApolloReactCommon.QueryResult<StripeAccountQuery, StripeAccountQueryVariables>;
export const AddPaymentDocument = gql`
    query addPayment($price: String) {
  stripeCheckoutSessionId(price: $price)
}
    `;

/**
 * __useAddPaymentQuery__
 *
 * To run a query within a React component, call `useAddPaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `useAddPaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAddPaymentQuery({
 *   variables: {
 *      price: // value for 'price'
 *   },
 * });
 */
export function useAddPaymentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AddPaymentQuery, AddPaymentQueryVariables>) {
        return ApolloReactHooks.useQuery<AddPaymentQuery, AddPaymentQueryVariables>(AddPaymentDocument, baseOptions);
      }
export function useAddPaymentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AddPaymentQuery, AddPaymentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AddPaymentQuery, AddPaymentQueryVariables>(AddPaymentDocument, baseOptions);
        }
export type AddPaymentQueryHookResult = ReturnType<typeof useAddPaymentQuery>;
export type AddPaymentLazyQueryHookResult = ReturnType<typeof useAddPaymentLazyQuery>;
export type AddPaymentQueryResult = ApolloReactCommon.QueryResult<AddPaymentQuery, AddPaymentQueryVariables>;
export const AuthDocument = gql`
    query auth {
  auth
}
    `;

/**
 * __useAuthQuery__
 *
 * To run a query within a React component, call `useAuthQuery` and pass it any options that fit your needs.
 * When your component renders, `useAuthQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAuthQuery({
 *   variables: {
 *   },
 * });
 */
export function useAuthQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AuthQuery, AuthQueryVariables>) {
        return ApolloReactHooks.useQuery<AuthQuery, AuthQueryVariables>(AuthDocument, baseOptions);
      }
export function useAuthLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AuthQuery, AuthQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AuthQuery, AuthQueryVariables>(AuthDocument, baseOptions);
        }
export type AuthQueryHookResult = ReturnType<typeof useAuthQuery>;
export type AuthLazyQueryHookResult = ReturnType<typeof useAuthLazyQuery>;
export type AuthQueryResult = ApolloReactCommon.QueryResult<AuthQuery, AuthQueryVariables>;
export const FakeChargeDocument = gql`
    query fakeCharge {
  viewer {
    id
    paymentIntent
  }
}
    `;

/**
 * __useFakeChargeQuery__
 *
 * To run a query within a React component, call `useFakeChargeQuery` and pass it any options that fit your needs.
 * When your component renders, `useFakeChargeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useFakeChargeQuery({
 *   variables: {
 *   },
 * });
 */
export function useFakeChargeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<FakeChargeQuery, FakeChargeQueryVariables>) {
        return ApolloReactHooks.useQuery<FakeChargeQuery, FakeChargeQueryVariables>(FakeChargeDocument, baseOptions);
      }
export function useFakeChargeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<FakeChargeQuery, FakeChargeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<FakeChargeQuery, FakeChargeQueryVariables>(FakeChargeDocument, baseOptions);
        }
export type FakeChargeQueryHookResult = ReturnType<typeof useFakeChargeQuery>;
export type FakeChargeLazyQueryHookResult = ReturnType<typeof useFakeChargeLazyQuery>;
export type FakeChargeQueryResult = ApolloReactCommon.QueryResult<FakeChargeQuery, FakeChargeQueryVariables>;
export const PlayersDocument = gql`
    query players($name: String) {
  viewer {
    id
    players(name: $name) {
      ...player
    }
  }
}
    ${PlayerFragmentDoc}`;

/**
 * __usePlayersQuery__
 *
 * To run a query within a React component, call `usePlayersQuery` and pass it any options that fit your needs.
 * When your component renders, `usePlayersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePlayersQuery({
 *   variables: {
 *      name: // value for 'name'
 *   },
 * });
 */
export function usePlayersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PlayersQuery, PlayersQueryVariables>) {
        return ApolloReactHooks.useQuery<PlayersQuery, PlayersQueryVariables>(PlayersDocument, baseOptions);
      }
export function usePlayersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PlayersQuery, PlayersQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PlayersQuery, PlayersQueryVariables>(PlayersDocument, baseOptions);
        }
export type PlayersQueryHookResult = ReturnType<typeof usePlayersQuery>;
export type PlayersLazyQueryHookResult = ReturnType<typeof usePlayersLazyQuery>;
export type PlayersQueryResult = ApolloReactCommon.QueryResult<PlayersQuery, PlayersQueryVariables>;
export const ProductsDocument = gql`
    query products {
  viewer {
    id
    availableProducts {
      token
      price
      term
    }
  }
}
    `;

/**
 * __useProductsQuery__
 *
 * To run a query within a React component, call `useProductsQuery` and pass it any options that fit your needs.
 * When your component renders, `useProductsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useProductsQuery({
 *   variables: {
 *   },
 * });
 */
export function useProductsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ProductsQuery, ProductsQueryVariables>) {
        return ApolloReactHooks.useQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);
      }
export function useProductsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ProductsQuery, ProductsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ProductsQuery, ProductsQueryVariables>(ProductsDocument, baseOptions);
        }
export type ProductsQueryHookResult = ReturnType<typeof useProductsQuery>;
export type ProductsLazyQueryHookResult = ReturnType<typeof useProductsLazyQuery>;
export type ProductsQueryResult = ApolloReactCommon.QueryResult<ProductsQuery, ProductsQueryVariables>;